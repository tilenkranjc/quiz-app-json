{"version":3,"sources":["constants/countdownTime.js","components/Header/index.js","components/Layout/index.js","components/Loader/index.js","images/mind.svg","constants/numOfQuestions.js","utils/calculateGrade.js","utils/calculateScore.js","utils/getLetter.js","utils/shuffle.js","utils/timeConverter.js","components/Main/index.js","components/Countdown/index.js","components/Quiz/index.js","components/Result/Stats.js","components/Result/QNA.js","components/Result/index.js","components/App/index.js","serviceWorkerRegistration.js","index.js"],"names":["Header","useState","promptEvent","setPromptEvent","appAccepted","setAppAccepted","isAppInstalled","window","matchMedia","matches","addEventListener","e","preventDefault","Menu","stackable","inverted","size","Item","header","style","color","position","Button","icon","labelPosition","content","onClick","prompt","userChoice","then","result","outcome","console","log","Layout","children","Loader","Container","Message","Icon","name","loading","Content","COUNTDOWN_TIME","hours","minutes","seconds","i","push","key","text","value","NUM_OF_QUESTIONS","calculateGrade","score","percentage","parseInt","grade","remarks","calculateScore","totalQuestions","correctAnswers","Number","toFixed","getLetter","number","letter","shuffle","array","length","j","Math","floor","random","timeConverter","milliseconds","slice","Main","startQuiz","category","numOfQuestions","setNumOfQuestions","difficulty","questionsType","countdownTime","setCountdownTime","processing","setProcessing","error","setError","handleTimeChange","allFieldsSelected","Segment","Group","divided","Image","src","mindImg","onDismiss","message","Divider","Meta","Dropdown","fluid","selection","placeholder","options","onChange","disabled","search","Extra","primary","results","questions","sort","selectn","forEach","element","correct_answer","incorrect_answers","Countdown","timeOver","setTimeTaken","totalTime","timerTime","setTimerTime","useEffect","timer","setInterval","newTime","clearInterval","Swal","fire","title","willClose","basic","floated","Popup","trigger","active","Quiz","data","endQuiz","questionIndex","setQuestionIndex","setCorrectAnswers","userSlectedAns","setUserSlectedAns","questionsAndAnswers","setQuestionsAndAnswers","timeTaken","handleItemClick","as","block","floating","dangerouslySetInnerHTML","__html","question","Description","vertical","map","option","decodedOption","he","decode","marginRight","point","qna","user_answer","Stats","replayQuiz","resetQuiz","textAlign","marginTop","marginBottom","QNA","Table","celled","striped","selectable","Row","HeaderCell","Body","item","Cell","Result","activeTab","setActiveTab","handleTabClick","widths","App","setLoading","setData","isQuizStarted","setIsQuizStarted","isQuizCompleted","setIsQuizCompleted","resultData","setResultData","setTimeout","shuffledData","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","toast","showConfirmButton","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.fb65d102.chunk.js","sourcesContent":["const COUNTDOWN_TIME = {\n  hours: [],\n  minutes: [],\n  seconds: []\n};\n\nfor (let i = 0; i < 100; i++) {\n  COUNTDOWN_TIME.hours.push({ key: i, text: i, value: i * 60 * 60 });\n}\n\nfor (let i = 0; i < 60; i++) {\n  COUNTDOWN_TIME.minutes.push({ key: i, text: i, value: i * 60 });\n}\n\nfor (let i = 0; i < 60; i++) {\n  COUNTDOWN_TIME.seconds.push({ key: i, text: i, value: i });\n}\n\nexport default COUNTDOWN_TIME;\n","import React, { useState } from 'react';\nimport { Menu, Button } from 'semantic-ui-react';\n\nconst Header = () => {\n  const [promptEvent, setPromptEvent] = useState(null);\n  const [appAccepted, setAppAccepted] = useState(false);\n\n  let isAppInstalled = false;\n\n  if (window.matchMedia('(display-mode: standalone)').matches || appAccepted) {\n    isAppInstalled = true;\n  }\n\n  window.addEventListener('beforeinstallprompt', e => {\n    e.preventDefault();\n    setPromptEvent(e);\n  });\n\n  const installApp = () => {\n    promptEvent.prompt();\n    promptEvent.userChoice.then(result => {\n      if (result.outcome === 'accepted') {\n        setAppAccepted(true);\n        console.log('User accepted the A2HS prompt');\n      } else {\n        console.log('User dismissed the A2HS prompt');\n      }\n    });\n  };\n\n  return (\n    <Menu stackable inverted size=\"massive\">\n      <Menu.Item header>\n        <h1 style={{ color: '#2185D0' }}>QuizApp-Json</h1>\n      </Menu.Item>\n      {promptEvent && !isAppInstalled && (\n        <Menu.Item position=\"right\">\n          <Button\n            color=\"teal\"\n            icon=\"cloud download\"\n            labelPosition=\"left\"\n            content=\"Install App\"\n            onClick={installApp}\n          />\n        </Menu.Item>\n      )}\n    </Menu>\n  );\n};\n\nexport default Header;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from '../Header';\n\nconst Layout = ({ children }) => {\n  return (\n    <Fragment>\n      <Header />\n      <main>{children}</main>\n    </Fragment>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node\n};\n\nexport default Layout;\n","import React from 'react';\nimport { Container, Message, Icon } from 'semantic-ui-react';\n\nconst Loader = () => {\n  return (\n    <Container>\n      <Message icon size=\"big\">\n        <Icon name=\"circle notched\" loading />\n        <Message.Content>\n          <Message.Header>Samo malo...</Message.Header>\n          Sestavljam vsebino.\n        </Message.Content>\n      </Message>\n    </Container>\n  );\n};\n\nexport default Loader;\n","export default __webpack_public_path__ + \"static/media/mind.525a3ae0.svg\";","const NUM_OF_QUESTIONS = [];\n\nfor (let i = 1; i <= 100; i++) {\n  NUM_OF_QUESTIONS.push({ key: i, text: i, value: i });\n}\n\nexport default NUM_OF_QUESTIONS;\n","const calculateGrade = score => {\n  const percentage = parseInt(score);\n\n  let grade = null;\n  let remarks = null;\n\n  if (percentage >= 97) {\n    grade = 'A+';\n  } else if (percentage >= 93 && percentage <= 96) {\n    grade = 'A';\n  } else if (percentage >= 90 && percentage <= 92) {\n    grade = 'A-';\n  } else if (percentage >= 87 && percentage <= 89) {\n    grade = 'B+';\n  } else if (percentage >= 83 && percentage <= 86) {\n    grade = 'B';\n  } else if (percentage >= 80 && percentage <= 82) {\n    grade = 'B-';\n  } else if (percentage >= 77 && percentage <= 79) {\n    grade = 'C+';\n  } else if (percentage >= 73 && percentage <= 76) {\n    grade = 'C';\n  } else if (percentage >= 70 && percentage <= 72) {\n    grade = 'C-';\n  } else if (percentage >= 67 && percentage <= 69) {\n    grade = 'D+';\n  } else if (percentage >= 63 && percentage <= 66) {\n    grade = 'D';\n  } else if (percentage >= 60 && percentage <= 62) {\n    grade = 'D-';\n  } else if (percentage < 60) {\n    grade = 'F';\n  }\n\n  if (score >= 60) {\n    remarks = 'Čestitke, OPRAVIL SI IZPIT!';\n  } else {\n    remarks = 'Žal, NISI OPRAVIL IZPITA!';\n  }\n\n  return {\n    grade,\n    remarks\n  };\n};\n\nexport default calculateGrade;\n","const calculateScore = (totalQuestions, correctAnswers) => {\n  return Number(((correctAnswers * 100) / totalQuestions).toFixed(2));\n};\n\nexport default calculateScore;\n","const getLetter = number => {\n  let letter;\n\n  switch (number) {\n    case 0:\n      letter = 'A.';\n      break;\n    case 1:\n      letter = 'B.';\n      break;\n    case 2:\n      letter = 'C.';\n      break;\n    case 3:\n      letter = 'D.';\n      break;\n    default:\n      letter = null;\n      break;\n  }\n\n  return letter;\n};\n\nexport default getLetter;\n","const shuffle = array => {\n  array = [...array];\n\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n\n  return array;\n};\n\nexport default shuffle;\n","const timeConverter = milliseconds => {\n  const hours = `0${Math.floor(milliseconds / 3600000)}`.slice(-2);\n  const minutes = `0${Math.floor((milliseconds / 60000) % 60)}`.slice(-2);\n  const seconds = `0${Math.floor((milliseconds / 1000) % 60) % 60}`.slice(-2);\n\n  return {\n    hours,\n    minutes,\n    seconds\n  };\n};\n\nexport default timeConverter;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Container,\n  Segment,\n  Item,\n  Dropdown,\n  Divider,\n  Button,\n  Message,\n} from 'semantic-ui-react';\n\nimport mindImg from '../../images/mind.svg';\n\nimport questions from '../../constants/data.json';\n\nimport {\n  //CATEGORIES,\n  NUM_OF_QUESTIONS,\n  //DIFFICULTY,\n  //QUESTIONS_TYPE,\n  COUNTDOWN_TIME,\n} from '../../constants';\nimport { shuffle } from '../../utils';\n\nconst Main = ({ startQuiz }) => {\n  const [category] = useState('0');\n  const [numOfQuestions, setNumOfQuestions] = useState(60);\n  const [difficulty] = useState('0');\n  const [questionsType] = useState('0');\n  const [countdownTime, setCountdownTime] = useState({\n    hours: 3600,\n    minutes: 1800,\n    seconds: 0,\n  });\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  //const [offline, setOffline] = useState(false);\n\n  const handleTimeChange = (e, { name, value }) => {\n    setCountdownTime({ ...countdownTime, [name]: value });\n  };\n\n  let allFieldsSelected = false;\n  if (\n    category &&\n    numOfQuestions &&\n    difficulty &&\n    questionsType &&\n    (countdownTime.hours || countdownTime.minutes || countdownTime.seconds)\n  ) {\n    allFieldsSelected = true;\n  }\n\n  const fetchDataL = () => {\n    const results = questions.sort(() => 0.5 - Math.random());\n    let selectn = numOfQuestions\n    if(selectn>results.length){\n      selectn=results.length\n    }\n    let selection = results.slice(0, numOfQuestions);\n\n    selection.forEach(element => {\n      element.options = shuffle([\n        element.correct_answer,\n        ...element.incorrect_answers,\n      ]);\n    });\n\n    setProcessing(false);\n    startQuiz(\n      selection,\n      countdownTime.hours + countdownTime.minutes + countdownTime.seconds\n    );\n  }\n\n  // const fetchData = () => {\n  //   setProcessing(true);\n\n  //   if (error) setError(null);\n\n  //   const API = `https://opentdb.com/api.php?amount=${numOfQuestions}&category=${category}&difficulty=${difficulty}&type=${questionsType}`;\n\n  //   fetch(API)\n  //     .then(respone => respone.json())\n  //     .then(data =>\n  //       setTimeout(() => {\n  //         const { response_code, results } = data;\n\n  //         if (response_code === 1) {\n  //           const message = (\n  //             <p>\n  //               The API doesn't have enough questions for your query. (Ex.\n  //               Asking for 50 Questions in a Category that only has 20.)\n  //               <br />\n  //               <br />\n  //               Please change the <strong>No. of Questions</strong>,{' '}\n  //               <strong>Difficulty Level</strong>, or{' '}\n  //               <strong>Type of Questions</strong>.\n  //             </p>\n  //           );\n\n  //           setProcessing(false);\n  //           setError({ message });\n\n  //           return;\n  //         }\n\n  //         results.forEach(element => {\n  //           element.options = shuffle([\n  //             element.correct_answer,\n  //             ...element.incorrect_answers,\n  //           ]);\n  //         });\n\n  //         setProcessing(false);\n  //         startQuiz(\n  //           results,\n  //           countdownTime.hours + countdownTime.minutes + countdownTime.seconds\n  //         );\n  //       }, 1000)\n  //     )\n  //     .catch(error =>\n  //       setTimeout(() => {\n  //         if (!navigator.onLine) {\n  //           setOffline(true);\n  //         } else {\n  //           setProcessing(false);\n  //           setError(error);\n  //         }\n  //       }, 1000)\n  //     );\n  // };\n\n  //if (offline) return <Offline />;\n\n  return (\n    <Container>\n      <Segment>\n        <Item.Group divided>\n          <Item>\n            <Item.Image src={mindImg} />\n            <Item.Content>\n              <Item.Header>\n                <h1>Generator vprašanj za radioamatersko licenco razred A</h1>\n              </Item.Header>\n              {error && (\n                <Message error onDismiss={() => setError(null)}>\n                  <Message.Header>Napaka!</Message.Header>\n                  {error.message}\n                </Message>\n              )}\n              <Divider />\n              <Item.Meta>\n                {/* <Dropdown\n                  fluid\n                  selection\n                  name=\"category\"\n                  placeholder=\"Select Quiz Category\"\n                  header=\"Select Quiz Category\"\n                  options={CATEGORIES}\n                  value={category}\n                  onChange={(e, { value }) => setCategory(value)}\n                  disabled={processing}\n                />\n                <br /> */}\n                <Dropdown\n                  fluid\n                  selection\n                  name=\"numOfQ\"\n                  placeholder=\"Število vprašanj\"\n                  header=\"Število vprašanj\"\n                  options={NUM_OF_QUESTIONS}\n                  value={numOfQuestions}\n                  onChange={(e, { value }) => setNumOfQuestions(value)}\n                  disabled={processing}\n                />\n                <br />\n                {/* <Dropdown\n                  fluid\n                  selection\n                  name=\"difficulty\"\n                  placeholder=\"Select Difficulty Level\"\n                  header=\"Select Difficulty Level\"\n                  options={DIFFICULTY}\n                  value={difficulty}\n                  onChange={(e, { value }) => setDifficulty(value)}\n                  disabled={processing}\n                />\n                <br />\n                <Dropdown\n                  fluid\n                  selection\n                  name=\"type\"\n                  placeholder=\"Select Questions Type\"\n                  header=\"Select Questions Type\"\n                  options={QUESTIONS_TYPE}\n                  value={questionsType}\n                  onChange={(e, { value }) => setQuestionsType(value)}\n                  disabled={processing}\n                />\n                <br /> */}\n                <Dropdown\n                  search\n                  selection\n                  name=\"hours\"\n                  placeholder=\"Ure\"\n                  header=\"Ure\"\n                  options={COUNTDOWN_TIME.hours}\n                  value={countdownTime.hours}\n                  onChange={handleTimeChange}\n                  disabled={processing}\n                />\n                <Dropdown\n                  search\n                  selection\n                  name=\"minutes\"\n                  placeholder=\"Minute\"\n                  header=\"Minute\"\n                  options={COUNTDOWN_TIME.minutes}\n                  value={countdownTime.minutes}\n                  onChange={handleTimeChange}\n                  disabled={processing}\n                />\n                <Dropdown\n                  search\n                  selection\n                  name=\"seconds\"\n                  placeholder=\"Sekunde\"\n                  header=\"Sekunde\"\n                  options={COUNTDOWN_TIME.seconds}\n                  value={countdownTime.seconds}\n                  onChange={handleTimeChange}\n                  disabled={processing}\n                />\n              </Item.Meta>\n              <Divider />\n              <Item.Extra>\n                <Button\n                  primary\n                  size=\"big\"\n                  icon=\"play\"\n                  labelPosition=\"left\"\n                  content={processing ? 'Procesiram...' : 'Začni'}\n                  onClick={fetchDataL}\n                  disabled={!allFieldsSelected || processing}\n                />\n              </Item.Extra>\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Segment>\n      <br />\n    </Container>\n  );\n};\n\nMain.propTypes = {\n  startQuiz: PropTypes.func.isRequired,\n};\n\nexport default Main;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popup } from 'semantic-ui-react';\nimport Swal from 'sweetalert2';\n\nimport { timeConverter } from '../../utils';\n\nconst Countdown = ({ countdownTime, timeOver, setTimeTaken }) => {\n  const totalTime = countdownTime * 1000;\n  const [timerTime, setTimerTime] = useState(totalTime);\n  const { hours, minutes, seconds } = timeConverter(timerTime);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const newTime = timerTime - 1000;\n\n      if (newTime >= 0) {\n        setTimerTime(newTime);\n      } else {\n        clearInterval(timer);\n\n        Swal.fire({\n          title: `Your Time's Up`,\n          icon: 'info',\n          timer: 5000,\n          willClose: () => timeOver(totalTime - timerTime)\n        });\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(timer);\n      setTimeTaken(totalTime - timerTime + 1000);\n    };\n\n    // eslint-disable-next-line\n  }, [timerTime]);\n\n  return (\n    <Button.Group size=\"massive\" basic floated=\"right\">\n      <Popup\n        content=\"Ure\"\n        trigger={<Button active>{hours}</Button>}\n        position=\"bottom left\"\n      />\n      <Popup\n        content=\"Minute\"\n        trigger={<Button active>{minutes}</Button>}\n        position=\"bottom left\"\n      />\n      <Popup\n        content=\"Sekunde\"\n        trigger={<Button active>{seconds}</Button>}\n        position=\"bottom left\"\n      />\n    </Button.Group>\n  );\n};\n\nCountdown.propTypes = {\n  countdownTime: PropTypes.number.isRequired,\n  timeOver: PropTypes.func.isRequired,\n  setTimeTaken: PropTypes.func.isRequired\n};\n\nexport default Countdown;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Container,\n  Segment,\n  Item,\n  Divider,\n  Button,\n  Icon,\n  Message,\n  Menu,\n  Header\n} from 'semantic-ui-react';\nimport he from 'he';\n\nimport Countdown from '../Countdown';\nimport { getLetter } from '../../utils';\n\nconst Quiz = ({ data, countdownTime, endQuiz }) => {\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [userSlectedAns, setUserSlectedAns] = useState(null);\n  const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\n  const [timeTaken, setTimeTaken] = useState(null);\n\n  const handleItemClick = (e, { name }) => {\n    setUserSlectedAns(name);\n  };\n\n  const handleNext = () => {\n    let point = 0;\n    if (userSlectedAns === he.decode(data[questionIndex].correct_answer)) {\n      point = 1;\n    }\n\n    const qna = questionsAndAnswers;\n    qna.push({\n      question: he.decode(data[questionIndex].question),\n      user_answer: userSlectedAns,\n      correct_answer: he.decode(data[questionIndex].correct_answer),\n      point\n    });\n\n    if (questionIndex === data.length - 1) {\n      return endQuiz({\n        totalQuestions: data.length,\n        correctAnswers: correctAnswers + point,\n        timeTaken,\n        questionsAndAnswers: qna\n      });\n    }\n\n    setCorrectAnswers(correctAnswers + point);\n    setQuestionIndex(questionIndex + 1);\n    setUserSlectedAns(null);\n    setQuestionsAndAnswers(qna);\n  };\n\n  const timeOver = timeTaken => {\n    return endQuiz({\n      totalQuestions: data.length,\n      correctAnswers,\n      timeTaken,\n      questionsAndAnswers\n    });\n  };\n\n  return (\n    <Item.Header>\n      <Container>\n        <Segment>\n          <Item.Group divided>\n            <Item>\n              <Item.Content>\n                <Item.Extra>\n                  <Header as=\"h1\" block floated=\"left\">\n                    <Icon name=\"info circle\" />\n                    <Header.Content>\n                      {`Vprašanje ${questionIndex + 1} od ${data.length}`}\n                    </Header.Content>\n                  </Header>\n                  <Countdown\n                    countdownTime={countdownTime}\n                    timeOver={timeOver}\n                    setTimeTaken={setTimeTaken}\n                  />\n                </Item.Extra>\n                <br />\n                <Item.Meta>\n                  <Message size=\"huge\" floating>\n                    <b dangerouslySetInnerHTML={{ __html:data[questionIndex].question}}></b>\n                  </Message>\n                  <br />\n                  <Item.Description>\n                    <h3>Izberi pravilni odgovor:</h3>\n                  </Item.Description>\n                  <Divider />\n                  <Menu vertical fluid size=\"massive\">\n                    {data[questionIndex].options.map((option, i) => {\n                      const letter = getLetter(i);\n                      const decodedOption = he.decode(option);\n\n                      return (\n                        <Menu.Item\n                          key={decodedOption}\n                          name={decodedOption}\n                          active={userSlectedAns === decodedOption}\n                          onClick={handleItemClick}\n                        >\n                          <b style={{ marginRight: '8px' }}>{letter}</b>\n                          <span dangerouslySetInnerHTML={{ __html:option}}></span>\n                          \n                        </Menu.Item>\n                      );\n                    })}\n                  </Menu>\n                </Item.Meta>\n                <Divider />\n                <Item.Extra>\n                  <Button\n                    primary\n                    content=\"Naprej\"\n                    onClick={handleNext}\n                    floated=\"right\"\n                    size=\"big\"\n                    icon=\"right chevron\"\n                    labelPosition=\"right\"\n                    disabled={!userSlectedAns}\n                  />\n                </Item.Extra>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n        <br />\n      </Container>\n    </Item.Header>\n  );\n};\n\nQuiz.propTypes = {\n  data: PropTypes.array.isRequired,\n  countdownTime: PropTypes.number.isRequired,\n  endQuiz: PropTypes.func.isRequired\n};\n\nexport default Quiz;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Segment, Header, Button } from 'semantic-ui-react';\n\n//import ShareButton from '../ShareButton';\nimport { calculateScore, calculateGrade, timeConverter } from '../../utils';\n\nconst Stats = ({\n  totalQuestions,\n  correctAnswers,\n  timeTaken,\n  replayQuiz,\n  resetQuiz\n}) => {\n  const score = calculateScore(totalQuestions, correctAnswers);\n  const { grade, remarks } = calculateGrade(score);\n  const { hours, minutes, seconds } = timeConverter(timeTaken);\n\n  return (\n    <Segment>\n      <Header as=\"h1\" textAlign=\"center\" block>\n        {remarks}\n      </Header>\n      <Header as=\"h2\" textAlign=\"center\" block>\n        Ocena: {grade}\n      </Header>\n      <Header as=\"h3\" textAlign=\"center\" block>\n        Vseh vprašanj: {totalQuestions}\n      </Header>\n      <Header as=\"h3\" textAlign=\"center\" block>\n        Pravilnih odgovorov: {correctAnswers}\n      </Header>\n      <Header as=\"h3\" textAlign=\"center\" block>\n        Dosežen odstotek: {score}%\n      </Header>\n      <Header as=\"h3\" textAlign=\"center\" block>\n        Minimalni odstotek: 60%\n      </Header>\n      <Header as=\"h3\" textAlign=\"center\" block>\n        Čas:{' '}\n        {`${Number(hours)}h ${Number(minutes)}m ${Number(seconds)}s`}\n      </Header>\n      <div style={{ marginTop: 35 }}>\n        <Button\n          primary\n          content=\"Ponovi vprašalnik\"\n          onClick={replayQuiz}\n          size=\"big\"\n          icon=\"redo\"\n          labelPosition=\"left\"\n          style={{ marginRight: 15, marginBottom: 8 }}\n        />\n        <Button\n          color=\"teal\"\n          content=\"Na začetek\"\n          onClick={resetQuiz}\n          size=\"big\"\n          icon=\"home\"\n          labelPosition=\"left\"\n          style={{ marginBottom: 8 }}\n        />\n        {/* <ShareButton /> */}\n      </div>\n    </Segment>\n  );\n};\n\nStats.propTypes = {\n  totalQuestions: PropTypes.number.isRequired,\n  correctAnswers: PropTypes.number.isRequired,\n  timeTaken: PropTypes.number.isRequired,\n  replayQuiz: PropTypes.func.isRequired,\n  resetQuiz: PropTypes.func.isRequired\n};\n\nexport default Stats;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\n\nconst QNA = ({ questionsAndAnswers }) => {\n  return (\n    <Table celled striped selectable size=\"large\">\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>No.</Table.HeaderCell>\n          <Table.HeaderCell>Questions</Table.HeaderCell>\n          <Table.HeaderCell>Your Answers</Table.HeaderCell>\n          <Table.HeaderCell>Correct Answers</Table.HeaderCell>\n          <Table.HeaderCell>Points</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {questionsAndAnswers.map((item, i) => (\n          <Table.Row key={i + 1}>\n            <Table.Cell>{i + 1}</Table.Cell>\n            <Table.Cell><span dangerouslySetInnerHTML={{ __html:item.question}}></span></Table.Cell>\n            <Table.Cell><span dangerouslySetInnerHTML={{ __html:item.user_answer}}></span></Table.Cell>\n            <Table.Cell><span dangerouslySetInnerHTML={{ __html:item.correct_answer}}></span></Table.Cell>\n            <Table.Cell>{item.point}</Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nQNA.propTypes = {\n  questionsAndAnswers: PropTypes.array.isRequired\n};\n\nexport default QNA;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Menu } from 'semantic-ui-react';\n\nimport Stats from './Stats';\nimport QNA from './QNA';\n\nconst Result = ({\n  totalQuestions,\n  correctAnswers,\n  timeTaken,\n  questionsAndAnswers,\n  replayQuiz,\n  resetQuiz\n}) => {\n  const [activeTab, setActiveTab] = useState('Stats');\n\n  const handleTabClick = (e, { name }) => {\n    setActiveTab(name);\n  };\n\n  return (\n    <Container>\n      <Menu fluid widths={2}>\n        <Menu.Item\n          name=\"Statistika\"\n          active={activeTab === 'Stats'}\n          onClick={handleTabClick}\n        />\n        <Menu.Item\n          name=\"QNA\"\n          active={activeTab === 'QNA'}\n          onClick={handleTabClick}\n        />\n      </Menu>\n      {activeTab === 'Stats' && (\n        <Stats\n          totalQuestions={totalQuestions}\n          correctAnswers={correctAnswers}\n          timeTaken={timeTaken}\n          replayQuiz={replayQuiz}\n          resetQuiz={resetQuiz}\n        />\n      )}\n      {activeTab === 'QNA' && <QNA questionsAndAnswers={questionsAndAnswers} />}\n      <br />\n    </Container>\n  );\n};\n\nResult.propTypes = {\n  totalQuestions: PropTypes.number.isRequired,\n  correctAnswers: PropTypes.number.isRequired,\n  timeTaken: PropTypes.number.isRequired,\n  questionsAndAnswers: PropTypes.array.isRequired,\n  replayQuiz: PropTypes.func.isRequired,\n  resetQuiz: PropTypes.func.isRequired\n};\n\nexport default Result;\n","import React, { useState } from 'react';\n\nimport Layout from '../Layout';\nimport Loader from '../Loader';\nimport Main from '../Main';\nimport Quiz from '../Quiz';\nimport Result from '../Result';\n\nimport { shuffle } from '../../utils';\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState(null);\n  const [countdownTime, setCountdownTime] = useState(null);\n  const [isQuizStarted, setIsQuizStarted] = useState(false);\n  const [isQuizCompleted, setIsQuizCompleted] = useState(false);\n  const [resultData, setResultData] = useState(null);\n\n  const startQuiz = (data, countdownTime) => {\n    setLoading(true);\n    setCountdownTime(countdownTime);\n\n    setTimeout(() => {\n      setData(data);\n      setIsQuizStarted(true);\n      setLoading(false);\n    }, 1000);\n  };\n\n  const endQuiz = resultData => {\n    setLoading(true);\n\n    setTimeout(() => {\n      setIsQuizStarted(false);\n      setIsQuizCompleted(true);\n      setResultData(resultData);\n      setLoading(false);\n    }, 2000);\n  };\n\n  const replayQuiz = () => {\n    setLoading(true);\n\n    const shuffledData = shuffle(data);\n    shuffledData.forEach(element => {\n      element.options = shuffle(element.options);\n    });\n\n    setData(shuffledData);\n\n    setTimeout(() => {\n      setIsQuizStarted(true);\n      setIsQuizCompleted(false);\n      setResultData(null);\n      setLoading(false);\n    }, 1000);\n  };\n\n  const resetQuiz = () => {\n    setLoading(true);\n\n    setTimeout(() => {\n      setData(null);\n      setCountdownTime(null);\n      setIsQuizStarted(false);\n      setIsQuizCompleted(false);\n      setResultData(null);\n      setLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <Layout>\n      {loading && <Loader />}\n      {!loading && !isQuizStarted && !isQuizCompleted && (\n        <Main startQuiz={startQuiz} />\n      )}\n      {!loading && isQuizStarted && (\n        <Quiz data={data} countdownTime={countdownTime} endQuiz={endQuiz} />\n      )}\n      {!loading && isQuizCompleted && (\n        <Result {...resultData} replayQuiz={replayQuiz} resetQuiz={resetQuiz} />\n      )}\n    </Layout>\n  );\n};\n\nexport default App;\n","import Swal from 'sweetalert2';\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service worker.'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              Swal.fire({\n                toast: 'true',\n                position: 'bottom',\n                icon: 'success',\n                title: 'App is ready to work offline.',\n                showConfirmButton: false,\n                timer: 6000\n              });\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}